<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="NetStandard" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetDir)Newtonsoft.Json.dll" #>
<#@ assembly name="$(TargetDir)Struct.PIM.Api.Models.dll" #>
<#@ assembly name="$(TargetDir)Struct.PIM.Api.Client.dll" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Struct.PIM.Api.Models.ModelGenerator" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#
    //To configure this T4Template, make sure the assemblies above points to
	//Newtonsoft.Json.dll, Struct.PIM.Api.Models.dkk and Struct.PIM.Api.Client.dll in your workspace

	//Set the URL to your struct PIM Api
    string pimUrl = "https://api.v37.cloud1.structpim.com/";

	//Set an API key, which has General -> Model generator access
    string apiKey = "7164da70-1c54-46ea-8a75-52f243c0ac66";

	//Select if you want to add attributes that are set through the category structure to be added to product and variant models
    bool addCategoryProperties = false;

	//Namespace of models generated
    string namespaceName = "Struct.PIM.Ucommerce.Connector.Integration.StructPim.Models";


    var apiClient = new Struct.PIM.Api.Client.StructPIMApiClient(pimUrl, apiKey);
    var models = apiClient.Miscellaneous.GetModels();
    var allAttributes = new List<ModelStructure.AttributeModel>();
    allAttributes.AddRange(models.ProductModels.SelectMany(x => x.Properties));
    allAttributes.AddRange(models.VariantModels.SelectMany(x => x.Properties));
    allAttributes.AddRange(models.CategoryModels.SelectMany(x => x.Properties));
    allAttributes.AddRange(models.CategoryAttributeModels);
    var uniqueAttributes = allAttributes.GroupBy(p => p.Alias).Select(g => g.First()).ToList();
#>
using System;
using System.Collections.Generic;
using Struct.PIM.Api.Models.Shared;
using Struct.PIM.Api.Models.Attribute;

namespace <#= namespaceName #>
{
    #region ProductModels
    <# foreach (var model in models.ProductModels) {
        var properties = addCategoryProperties ? model.Properties.Concat(models.CategoryAttributeModels).ToList() : model.Properties;
        WriteLine(GenerateClass(model.Alias + "Product", properties, models.GlobalListModels, false));
    } #>
    #endregion

    #region VariantModels
    <# foreach (var model in models.VariantModels) {
        var properties = addCategoryProperties ? model.Properties.Concat(models.CategoryAttributeModels).ToList() : model.Properties;
        WriteLine(GenerateClass(model.Alias + "Variant", properties, models.GlobalListModels, false));
    } #>
    #endregion

    #region CategoryModels
    <# foreach (var model in models.CategoryModels) {
        WriteLine(GenerateClass(model.Alias + "Category", model.Properties, models.GlobalListModels, false));
    } #>
    #endregion

    #region Attributes
    <# foreach (var model in uniqueAttributes.Where(x => x.DataType == "ComplexAttribute")) {
        WriteLine(GenerateClass(model.Alias, model.Properties, models.GlobalListModels, true));
    } #>

    <# foreach (var model in uniqueAttributes.Where(x => x.DataType == "ListAttribute" && x.Properties[0].DataType == "ComplexAttribute")) {
        WriteLine(GenerateClass(model.Alias, model.Properties[0].Properties, models.GlobalListModels, true));
    } #>
    #endregion

    #region GlobalListModels
    <# foreach (var model in models.GlobalListModels.Where(x => x.DataType == "ComplexAttribute")) {
        WriteLine(GenerateClass(model.Alias + "GlobalList", model.Properties, models.GlobalListModels, true));
    } #>

    <# foreach (var model in models.GlobalListModels.Where(x => x.DataType == "ListAttribute" && x.Properties[0].DataType == "ComplexAttribute")) {
        WriteLine(GenerateClass(model.Alias + "GlobalList", model.Properties[0].Properties, models.GlobalListModels, true));
    } #>
    #endregion
}

<#+
private static string GenerateClass(string name, List<Struct.PIM.Api.Models.ModelGenerator.ModelStructure.AttributeModel> properties, List<Struct.PIM.Api.Models.ModelGenerator.ModelStructure.AttributeModel> globalListModels, bool generateSubclasses)
{
    return GenerateClassRecursive(name, properties, globalListModels, new StringBuilder(), generateSubclasses);
}

private static string GenerateClassRecursive(string name, List<ModelStructure.AttributeModel> properties, List<Struct.PIM.Api.Models.ModelGenerator.ModelStructure.AttributeModel> globalListModels, StringBuilder sb, bool generateSubclasses)
{
    sb.AppendLine($"public partial class {ToClassName(name)}Model");
    sb.AppendLine("{");

    foreach (var property in properties ?? new List<Struct.PIM.Api.Models.ModelGenerator.ModelStructure.AttributeModel>(0))
    {
        var dataType = GetDataType(property, globalListModels);

        sb.AppendLine("   /// <summary>");
        sb.AppendLine("   /// " + (string.IsNullOrWhiteSpace(property.Description) ? property.Name : property.Description));
        sb.AppendLine("   /// </summary>");
        sb.AppendLine($@"   public virtual {dataType} {property.Alias} {{ get; set; }}");

        if (generateSubclasses)
        {
            if (property.DataType == "ComplexAttribute")
            {
                GenerateClassRecursive(property.Alias, property.Properties, globalListModels, sb, generateSubclasses);
            }
            else if (property.DataType == "ListAttribute" && property.Properties[0].DataType == "ComplexAttribute")
            {
                GenerateClassRecursive(property.Alias, property.Properties[0].Properties, globalListModels, sb, generateSubclasses);
            }
        }
    }

    sb.AppendLine("}");
    return sb.ToString();
}

private static string GetDataType(ModelStructure.AttributeModel property, List<ModelStructure.AttributeModel> globalListModels)
{
    string type;

    if (property.DataType == "ListAttribute")
    {
        var subProperty = property.Properties[0];
        if (subProperty.DataType == "ComplexAttribute")
        {
            type = property.Alias + "Model";
        }
        else
        {
            type = GetDataType(subProperty, globalListModels);
        }
    }
    else if (property.DataType == "ComplexAttribute")
    {
        type = property.Alias + "Model";
    }
    else if (property.DataType == "FixedListAttribute")
    {
        var globalListModel = globalListModels.First(x => x.Alias == property.ReferencedAttribute);
        if (globalListModel.DataType == "ComplexAttribute")
        {
            type = property.ReferencedAttribute + "GlobalListModel";
        }
        else
        {
            type = GetDataType(globalListModel, globalListModels);
        }
    }
    else
    {
        type = SimpleAttributeTypeMap[property.DataType];
    }

    if (property.IsMultiValue)
    {
        type = $"List<{type.TrimEnd('?')}>";
    }

    if (property.DimensionSpecific && property.Localized)
    {
        return $"List<SegmentedLocalizedData<{type.TrimEnd('?')}>>";
    }
    else if (property.DimensionSpecific)
    {
        type = $"List<SegmentedData<{type.TrimEnd('?')}>>";
    }
    else if (property.Localized)
    {
        type = $"List<LocalizedData<{type.TrimEnd('?')}>>";
    }

    return type;
}

private static readonly Dictionary<string, string> SimpleAttributeTypeMap = new Dictionary<string, string> {
    {"TextAttribute", "string" },
    {"NumberAttribute", "decimal?" },
    {"BooleanAttribute", "bool?" },
    {"DateTimeAttribute", "DateTimeOffset?" },
    {"MediaAttribute", "string" },
    {"ProductReferenceAttribute", "int?" },
    {"VariantReferenceAttribute", "int?" },
    {"CategoryReferenceAttribute", "int?" },
    {"CollectionReferenceAttribute", "Guid?" },
    {"AttributeReferenceAttribute", "AttributeReference" }
};

private static string ToClassName(string name)
{
    var className = name;
    var isValid = Microsoft.CSharp.CSharpCodeProvider.CreateProvider("C#").IsValidIdentifier(className);

    if (!isValid)
    {
        // File name contains invalid chars, remove them
        var regex = new Regex(@"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Nl}\p{Mn}\p{Mc}\p{Cf}\p{Pc}\p{Lm}]");
        className = regex.Replace(className, "");

        // Class name doesn't begin with a letter, insert an @
        if (!char.IsLetter(className, 0))
        {
            className = className.Insert(0, "@");
        }
    }

    className = className.Replace(" ", string.Empty);

    //if still not valid. 
    //this is the case when eg using a reserved keyword as property name. Prefix with @
    if (!Microsoft.CSharp.CSharpCodeProvider.CreateProvider("C#").IsValidIdentifier(className))
    {
        className = className.Insert(0, "@");
    }
    return className.Replace(" ", string.Empty);
}
#>